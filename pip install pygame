import pygame
import random

# Inicializa o Pygame
pygame.init()

# Configurações da tela
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Cuca e a Vassoura Mágica")

# Cores
white = (255, 255, 255)
black = (0, 0, 0)
green = (0, 255, 0)
red = (255, 0, 0)

# Configurações da Cuca
cuca_width = 50
cuca_height = 60
cuca_x = screen_width // 2
cuca_y = screen_height - cuca_height - 10
cuca_speed = 5

# Configurações da moeda
coin_width = 30
coin_height = 30
coin_count = 10
coins = []

for _ in range(coin_count):
    coin_x = random.randint(0, screen_width - coin_width)
    coin_y = random.randint(0, screen_height - coin_height)
    coins.append(pygame.Rect(coin_x, coin_y, coin_width, coin_height))

# Configurações de vida
life = 100
font = pygame.font.SysFont(None, 36)

def draw_cuca(x, y):
    pygame.draw.rect(screen, green, [x, y, cuca_width, cuca_height])

def draw_coins(coins):
    for coin in coins:
        pygame.draw.rect(screen, yellow, coin)

def draw_life(life):
    life_text = font.render(f'Vida: {life}', True, red)
    screen.blit(life_text, [10, 10])

# Loop principal do jogo
running = True
clock = pygame.time.Clock()

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        cuca_x -= cuca_speed
    if keys[pygame.K_RIGHT]:
        cuca_x += cuca_speed

    # Verifica colisão com as moedas
    cuca_rect = pygame.Rect(cuca_x, cuca_y, cuca_width, cuca_height)
    coins = [coin for coin in coins if not cuca_rect.colliderect(coin)]

    # Atualiza o nível de vida
    if len(coins) < coin_count:
        life += 1
        if life > 100:
            life = 100

    # Preenche o fundo
    screen.fill(white)

    # Desenha a Cuca
    draw_cuca(cuca_x, cuca_y)

    # Desenha as moedas restantes
    draw_coins(coins)

    # Desenha o nível de vida
    draw_life(life)

    # Atualiza a tela
    pygame.display.flip()

    # Define a taxa de atualização
    clock.tick(30)

pygame.quit()
